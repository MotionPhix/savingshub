<script setup lang="ts">
import {ref, computed, onMounted, watch} from 'vue'
import {useForm} from 'vee-validate'
import {toTypedSchema} from '@vee-validate/zod'
import * as z from 'zod'
import {
  CalendarIcon,
  Loader2Icon,
  CheckCircleIcon,
  InfoIcon
} from 'lucide-vue-next'
import {format} from 'date-fns'
import {cn} from '@/lib/utils'
import {router} from "@inertiajs/vue3"
import {toast} from "vue-sonner"
import {formatCurrency} from "@/lib/formatters"

// UI Components
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/Components/ui/form'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from "@/Components/ui/card"
import {Calendar} from '@/Components/ui/v-calendar'
import {Input} from '@/Components/ui/input'
import {Button} from "@/Components/ui/button"
import {
  Popover,
  PopoverTrigger,
  PopoverContent
} from "@/Components/ui/popover"
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectItem,
  SelectContent
} from "@/Components/ui/select"
import AppLayout from "@/Layouts/AppLayout.vue";

// Props
const props = defineProps({
  activeGroup: {
    type: Object,
    required: true
  },
  contributionSettings: {
    type: Object,
    default: () => ({
      min_contribution: 0,
      max_contribution: 1000000,
      recommended_contribution: null
    })
  }
})

// Validation Schema
const validationSchema = toTypedSchema(
  z.object({
    amount: z.coerce
      .number({
        required_error: "Contribution amount is required",
        invalid_type_error: "Amount must be a number"
      })
      .min(props.contributionSettings?.min_contribution || 0, {
        message: `Minimum contribution is ${formatCurrency(props.contributionSettings?.min_contribution || 0)}`
      })
      .max(props.contributionSettings?.max_contribution || 1000000, {
        message: `Maximum contribution is ${formatCurrency(props.contributionSettings?.max_contribution || 1000000)}`
      }),
    contribution_date: z.date({
      required_error: "Contribution date is required"
    }).max(new Date(), {
      message: "Contribution date cannot be in the future"
    }),
    type: z.enum(['regular', 'extra', 'makeup'], {
      required_error: "Contribution type is required"
    }),
    payment_method: z.enum(['cash', 'bank_transfer', 'mobile_money'], {
      required_error: "Payment method is required"
    }),
    transaction_reference: z.string().optional().nullable()
  })
)

// Form Setup
const {handleSubmit, defineField, errors, isSubmitting, resetForm: veeResetForm} = useForm({
  validationSchema,
  initialValues: {
    type: 'regular',
    contribution_date: new Date(),
    payment_method: null
  }
})

// Form Fields
const [amountField, amountProps] = defineField('amount')
const [contributionDateField, contributionDateProps] = defineField('contribution_date')
const [typeField, typeProps] = defineField('type')
const [paymentMethodField, paymentMethodProps] = defineField('payment_method')
const [transactionReferenceField, transactionReferenceProps] = defineField('transaction_reference')

// Contribution Types
const contributionTypes = [
  {value: 'regular', label: 'Regular Contribution'},
  {value: 'extra', label: 'Extra Contribution'},
  {value: 'makeup', label: 'Makeup Contribution'}
]

// Payment Methods
const paymentMethods = [
  {value: 'cash', label: 'Cash'},
  {value: 'bank_transfer', label: 'Bank Transfer'},
  {value: 'mobile_money', label: 'Mobile Money'}
]

// Computed Properties
const minContribution = computed(() =>
  props.contributionSettings?.min_contribution || 0
)

const maxContribution = computed(() =>
  props.contributionSettings?.max_contribution || 1000000
)

const recommendedContribution = computed(() =>
  props.contributionSettings?.recommended_contribution || null
)

// Watch payment method to reset transaction reference
watch(paymentMethodField, (newMethod) => {
  if (newMethod !== 'bank_transfer') {
    transactionReferenceField.value = null
  }
})

// Submission Handler
const submitContribution = handleSubmit(async (values) => {
  try {
    // Prepare submission data
    const submissionData = {
      ...values,
      group_id: props.activeGroup.id,
      contribution_date: format(values.contribution_date, 'yyyy-MM-dd')
    }

    // Submit contribution
    router.post(route('contributions.store'), submissionData, {
      onSuccess: () => {
        toast.success('Contribution added successfully')
        router.visit(route('contributions.index'))
      },
      onError: (errors) => {
        // Handle server-side validation errors
        Object.entries(errors).forEach(([key, message]) => {
          toast.error(message as string)
        })
      }
    })
  } catch (error) {
    // Handle unexpected errors
    toast.error('An unexpected error occurred')
    console.error(error)
  }
})

// Date Handling
const handleDateSelect = (date: Date) => {
  contributionDateField.value = date
}
</script>

<template>
  <AppLayout>
    <div class="mx-auto sm:px-4 space-y-6 my-12">
      <!-- Page Header -->
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">
          New Contribution for {{ activeGroup.name }}
        </h1>
      </div>

      <!-- Contribution Form -->
      <Card>
        <CardHeader>
          <CardTitle>Contribution Details</CardTitle>
          <CardDescription>
            Enter your contribution information
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form @submit.prevent="submitContribution" class="space-y-6">
            <!-- Contribution Amount -->
            <FormField v-slot="{ componentField }" name="amount">
              <FormItem>
                <FormLabel>Contribution Amount</FormLabel>
                <FormControl>
                  <Input
                    type="number"
                    step="0.01"
                    v-bind="componentField"
                    :min="minContribution"
                    :max="maxContribution"
                    placeholder="Enter contribution amount"
                  />
                </FormControl>
                <FormDescription v-if="recommendedContribution">
                  Recommended: {{ formatCurrency(recommendedContribution) }}
                </FormDescription>
                <FormMessage/>
              </FormItem>
            </FormField>

            <!-- Contribution Date -->
            <FormField v-slot="{ field }" name="contribution_date">
              <FormItem>
                <FormLabel>Contribution Date</FormLabel>
                <Popover>
                  <PopoverTrigger as-child>
                    <FormControl>
                      <Button
                        variant="outline"
                        :class="cn(
                        'w-full pl-3 text-left font-normal',
                        !field.value && 'text-muted-foreground'
                      )"
                      >
                        <CalendarIcon class="mr-2 h-4 w-4"/>
                        {{
                          field.value
                            ? format(new Date(field.value), 'PPP')
                            : 'Pick a date'
                        }}
                      </Button>
                    </FormControl>
                  </PopoverTrigger>
                  <PopoverContent class="w-auto p-0">
                    <Calendar
                      :month-start="new Date()"
                      :disabled-dates="{ after: new Date() }"
                      @select-date="handleDateSelect"
                    />
                  </PopoverContent>
                </Popover>
                <FormDescription>
                  Select the date of your contribution
                </FormDescription>
                <FormMessage/>
              </FormItem>
            </FormField>

            <!-- Contribution Type -->
            <FormField v-slot="{ componentField }" name="type">
              <FormItem>
                <FormLabel>Contribution Type</FormLabel>
                <Select v-bind="componentField">
                  <SelectTrigger>
                    <SelectValue placeholder="Select contribution type"/>
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem
                      v-for="type in contributionTypes"
                      :key="type.value"
                      :value="type.value"
                    >
                      {{ type.label }}
                    </SelectItem>
                  </SelectContent>
                </Select>
                <FormDescription>
                  Choose the type of contribution
                </FormDescription>
                <FormMessage/>
              </FormItem>
            </FormField>

            <!-- Payment Method -->
            <FormField v-slot="{ componentField }" name="payment_method">
              <FormItem>
                <FormLabel>Payment Method</FormLabel>
                <Select v-bind="componentField">
                  <SelectTrigger>
                    <SelectValue placeholder="Select payment method"/>
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem
                      v-for="method in paymentMethods"
                      :key="method.value"
                      :value="method.value"
                    >
                      {{ method.label }}
                    </SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage/>
              </FormItem>
            </FormField>

            <!-- Transaction Reference (Conditional) -->
            <FormField
              v-if="paymentMethodField === 'bank_transfer'"
              v-slot="{ componentField }"
              name="transaction_reference"
            >
              <FormItem>
                <FormLabel>Transaction Reference</FormLabel>
                <FormControl>
                  <Input
                    type="text"
                    v-bind="componentField"
                    placeholder="Enter transaction reference"
                  />
                </FormControl>
                <FormDescription>
                  Provide the bank transfer reference number
                </FormDescription>
                <FormMessage/>
              </FormItem>
            </FormField>

            <!-- Submit Button -->
            <Button
              type="submit"
              :disabled="isSubmitting"
              class="w-full"
            >
              <Loader2Icon
                v-if="isSubmitting"
                class="mr-2 h-4 w-4 animate-spin"
              />
              Submit Contribution
            </Button>
          </form>
        </CardContent>
      </Card>

      <!-- Contribution Guidelines -->
      <Card>
        <CardHeader>
          <CardTitle>Contribution Guidelines</CardTitle>
        </CardHeader>
        <CardContent>
          <ul class="space-y-2 text-muted-foreground">
            <li>
              <CheckCircleIcon class="inline mr-2 h-4 w-4 text-green-500 font-figures"/>
              Minimum Contribution: {{ formatCurrency(minContribution) }}
            </li>
            <li>
              <InfoIcon class="inline mr-2 h-4 w-4 text-blue-500 font-figures"/>
              Recommended Contribution: {{ formatCurrency(recommendedContribution || 0) }}
            </li>
            <li>
              <CalendarIcon class="inline mr-2 h-4 w-4 text-muted-foreground"/>
              Contributions are due by the end of each month
            </li>
          </ul>
        </CardContent>
      </Card>
    </div>
  </AppLayout>
</template>

<style scoped>
/* Responsive adjustments */
@media (max-width: 640px) {
  .container {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }
}
</style>
